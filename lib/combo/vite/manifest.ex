defmodule Combo.Vite.Manifest do
  @moduledoc """
  Handles the manifest file generated by Vite.
  """

  alias __MODULE__.Chunk

  @type raw :: binary()

  @type key :: String.t()
  @type chunk :: Chunk.t()
  @type t :: %{optional(key()) => chunk()}

  @spec parse(raw) :: t()
  def parse(binary) when is_binary(binary) do
    chunks_map = JSON.decode!(binary)

    Map.new(chunks_map, fn {key, chunk} ->
      chunk = %Chunk{
        src: Map.get(chunk, "src", nil),
        file: Map.fetch!(chunk, "file"),
        css: Map.get(chunk, "css", []),
        assets: Map.get(chunk, "assets", []),
        is_entry?: Map.get(chunk, "isEntry", false),
        name: Map.get(chunk, "name", nil),
        names: Map.get(chunk, "names", []),
        is_dynamic_entry?: Map.get(chunk, "isDynamicEntry", false),
        imports: Map.get(chunk, "imports", []),
        dynamic_imports: Map.get(chunk, "dynamicImports", [])
      }

      {key, chunk}
    end)
  end

  @spec fetch_chunk!(t(), key()) :: chunk()
  def fetch_chunk!(%{} = manifest, key) do
    Map.fetch!(manifest, key)
  end

  @spec fetch_imported_chunks!(t(), key()) :: [chunk()]
  def fetch_imported_chunks!(%{} = manifest, key) do
    chunk = fetch_chunk!(manifest, key)

    imports = chunk.imports
    chunks = []
    chunk_keys = MapSet.new()
    stack = []

    # collect imported chunks in the deep-first way
    dfc(imports, chunks, chunk_keys, stack, manifest)
  end

  defp dfc([], chunks, _chunk_keys, [], _manifest) do
    Enum.reverse(chunks)
  end

  defp dfc([], chunks, chunk_keys, [[key | rest_imports] | stack], manifest) do
    chunk = fetch_chunk!(manifest, key)
    new_chunks = [chunk | chunks]
    new_chunk_keys = MapSet.put(chunk_keys, key)
    dfc(rest_imports, new_chunks, new_chunk_keys, stack, manifest)
  end

  defp dfc([key | rest_imports] = imports, chunks, chunk_keys, stack, manifest) do
    if MapSet.member?(chunk_keys, key) do
      dfc(rest_imports, chunks, chunk_keys, stack, manifest)
    else
      chunk = fetch_chunk!(manifest, key)
      new_stack = [imports | stack]
      dfc(chunk.imports, chunks, chunk_keys, new_stack, manifest)
    end
  end
end
